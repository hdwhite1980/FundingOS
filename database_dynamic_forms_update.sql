-- Database Schema Updates for Dynamic Form Analysis System
-- Run this in your Supabase SQL Editor

-- =====================================================================
-- PART 1: Create dynamic_form_templates table
-- =====================================================================

-- This table stores the extracted form structures from uploaded documents
CREATE TABLE IF NOT EXISTS dynamic_form_templates (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  
  -- Form identification
  form_title TEXT NOT NULL,
  form_type TEXT NOT NULL, -- grant_application, loan_application, registration, survey, etc.
  form_version TEXT,
  source_document_name TEXT,
  source_document_hash TEXT UNIQUE, -- To prevent duplicate processing
  
  -- Extracted structure (main data)
  form_structure JSONB NOT NULL, -- Complete formFields, formSections, formMetadata
  field_mappings JSONB, -- Suggested mappings to our data fields
  extraction_metadata JSONB, -- Confidence, detection info, statistics
  
  -- Form characteristics
  total_fields INTEGER DEFAULT 0,
  required_fields INTEGER DEFAULT 0,
  sections_count INTEGER DEFAULT 0,
  extraction_confidence DECIMAL(3,2) DEFAULT 0, -- 0.00 to 1.00
  
  -- Processing info
  extraction_status TEXT DEFAULT 'processing', -- processing, completed, failed, needs_review
  extraction_errors JSONB, -- Any errors or warnings during extraction
  
  -- Usage tracking
  times_used INTEGER DEFAULT 0,
  last_used_at TIMESTAMP WITH TIME ZONE,
  
  -- Standard timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================================
-- PART 2: Create dynamic_form_submissions table  
-- =====================================================================

-- This table tracks applications generated using dynamic forms
CREATE TABLE IF NOT EXISTS dynamic_form_submissions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  opportunity_id UUID REFERENCES opportunities(id) ON DELETE CASCADE,
  form_template_id UUID NOT NULL REFERENCES dynamic_form_templates(id) ON DELETE CASCADE,
  
  -- Generated application data
  generated_responses JSONB NOT NULL, -- Field responses generated by AI
  custom_responses JSONB, -- User-customized field responses
  final_responses JSONB, -- Final responses used in submission
  
  -- Generation metadata
  generation_method TEXT DEFAULT 'ai_generated', -- ai_generated, user_created, hybrid
  ai_model_used TEXT, -- Track which AI model was used
  generation_confidence DECIMAL(3,2) DEFAULT 0,
  generation_metadata JSONB, -- Token usage, processing time, etc.
  
  -- Document generation
  pdf_generated BOOLEAN DEFAULT false,
  pdf_file_path TEXT,
  pdf_generation_metadata JSONB,
  
  -- Submission tracking
  submission_status TEXT DEFAULT 'draft', -- draft, ready, submitted, response_received
  submitted_at TIMESTAMP WITH TIME ZONE,
  submission_method TEXT, -- online, email, mail, etc.
  submission_reference TEXT, -- Confirmation number, tracking ID, etc.
  
  -- Response tracking
  response_received BOOLEAN DEFAULT false,
  response_date TIMESTAMP WITH TIME ZONE,
  response_outcome TEXT, -- approved, denied, pending, needs_more_info
  award_amount DECIMAL(12,2),
  response_notes TEXT,
  
  -- Standard timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================================
-- PART 3: Create form_field_mappings table
-- =====================================================================

-- This table stores learned mappings between form fields and our data
CREATE TABLE IF NOT EXISTS form_field_mappings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  
  -- Form field info
  form_field_id TEXT NOT NULL,
  form_field_label TEXT NOT NULL,
  form_field_type TEXT NOT NULL,
  form_type TEXT NOT NULL, -- The type of form this mapping applies to
  
  -- Mapping info
  data_source TEXT NOT NULL, -- organization, project, user, calculated, custom
  data_field TEXT NOT NULL, -- The field name in our data structure
  transformation_rule TEXT, -- How to transform/format the data
  
  -- Validation
  mapping_confidence DECIMAL(3,2) DEFAULT 0,
  user_verified BOOLEAN DEFAULT false,
  user_modified BOOLEAN DEFAULT false,
  
  -- Usage tracking
  times_used INTEGER DEFAULT 0,
  success_rate DECIMAL(3,2) DEFAULT 0, -- How often this mapping worked well
  last_used_at TIMESTAMP WITH TIME ZONE,
  
  -- Standard timestamps  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Ensure unique mappings per user
  UNIQUE(user_id, form_field_id, form_type)
);

-- =====================================================================
-- PART 4: Add columns to existing tables for dynamic form support
-- =====================================================================

-- Add dynamic form support to project_opportunities table
ALTER TABLE project_opportunities
ADD COLUMN IF NOT EXISTS dynamic_form_template_id UUID REFERENCES dynamic_form_templates(id),
ADD COLUMN IF NOT EXISTS dynamic_form_responses JSONB,
ADD COLUMN IF NOT EXISTS form_completion_percentage DECIMAL(5,2) DEFAULT 0,
ADD COLUMN IF NOT EXISTS uses_dynamic_form BOOLEAN DEFAULT false;

-- Add dynamic form tracking to submissions table
ALTER TABLE submissions  
ADD COLUMN IF NOT EXISTS dynamic_form_template_id UUID REFERENCES dynamic_form_templates(id),
ADD COLUMN IF NOT EXISTS dynamic_form_submission_id UUID REFERENCES dynamic_form_submissions(id),
ADD COLUMN IF NOT EXISTS generated_using_ai BOOLEAN DEFAULT false;

-- =====================================================================
-- PART 5: Create indexes for performance
-- =====================================================================

-- Indexes for dynamic_form_templates
CREATE INDEX IF NOT EXISTS idx_dynamic_form_templates_user_id ON dynamic_form_templates(user_id);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_templates_form_type ON dynamic_form_templates(form_type);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_templates_source_hash ON dynamic_form_templates(source_document_hash);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_templates_status ON dynamic_form_templates(extraction_status);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_templates_confidence ON dynamic_form_templates(extraction_confidence);

-- Indexes for dynamic_form_submissions  
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_user_id ON dynamic_form_submissions(user_id);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_project_id ON dynamic_form_submissions(project_id);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_opportunity_id ON dynamic_form_submissions(opportunity_id);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_template_id ON dynamic_form_submissions(form_template_id);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_status ON dynamic_form_submissions(submission_status);
CREATE INDEX IF NOT EXISTS idx_dynamic_form_submissions_submitted_at ON dynamic_form_submissions(submitted_at);

-- Indexes for form_field_mappings
CREATE INDEX IF NOT EXISTS idx_form_field_mappings_user_id ON form_field_mappings(user_id);
CREATE INDEX IF NOT EXISTS idx_form_field_mappings_form_type ON form_field_mappings(form_type);  
CREATE INDEX IF NOT EXISTS idx_form_field_mappings_data_source ON form_field_mappings(data_source);
CREATE INDEX IF NOT EXISTS idx_form_field_mappings_verified ON form_field_mappings(user_verified);

-- Indexes for updated columns
CREATE INDEX IF NOT EXISTS idx_project_opportunities_dynamic_form_template ON project_opportunities(dynamic_form_template_id);
CREATE INDEX IF NOT EXISTS idx_project_opportunities_uses_dynamic_form ON project_opportunities(uses_dynamic_form);
CREATE INDEX IF NOT EXISTS idx_submissions_dynamic_form_template ON submissions(dynamic_form_template_id);

-- =====================================================================
-- PART 6: Enable Row Level Security (RLS) policies
-- =====================================================================

-- Enable RLS on new tables
ALTER TABLE dynamic_form_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE dynamic_form_submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE form_field_mappings ENABLE ROW LEVEL SECURITY;

-- RLS policies for dynamic_form_templates
DROP POLICY IF EXISTS "Users can view their own form templates" ON dynamic_form_templates;
CREATE POLICY "Users can view their own form templates" ON dynamic_form_templates
  FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own form templates" ON dynamic_form_templates;
CREATE POLICY "Users can insert their own form templates" ON dynamic_form_templates
  FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own form templates" ON dynamic_form_templates;
CREATE POLICY "Users can update their own form templates" ON dynamic_form_templates
  FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own form templates" ON dynamic_form_templates;
CREATE POLICY "Users can delete their own form templates" ON dynamic_form_templates
  FOR DELETE USING (auth.uid() = user_id);

-- RLS policies for dynamic_form_submissions
DROP POLICY IF EXISTS "Users can view their own form submissions" ON dynamic_form_submissions;
CREATE POLICY "Users can view their own form submissions" ON dynamic_form_submissions
  FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own form submissions" ON dynamic_form_submissions;
CREATE POLICY "Users can insert their own form submissions" ON dynamic_form_submissions
  FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own form submissions" ON dynamic_form_submissions;
CREATE POLICY "Users can update their own form submissions" ON dynamic_form_submissions
  FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own form submissions" ON dynamic_form_submissions;
CREATE POLICY "Users can delete their own form submissions" ON dynamic_form_submissions
  FOR DELETE USING (auth.uid() = user_id);

-- RLS policies for form_field_mappings
DROP POLICY IF EXISTS "Users can view their own field mappings" ON form_field_mappings;
CREATE POLICY "Users can view their own field mappings" ON form_field_mappings
  FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own field mappings" ON form_field_mappings;
CREATE POLICY "Users can insert their own field mappings" ON form_field_mappings
  FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own field mappings" ON form_field_mappings;
CREATE POLICY "Users can update their own field mappings" ON form_field_mappings
  FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own field mappings" ON form_field_mappings;
CREATE POLICY "Users can delete their own field mappings" ON form_field_mappings
  FOR DELETE USING (auth.uid() = user_id);

-- =====================================================================
-- PART 7: Create updated_at triggers for new tables
-- =====================================================================

-- Trigger for dynamic_form_templates
DROP TRIGGER IF EXISTS update_dynamic_form_templates_updated_at ON dynamic_form_templates;
CREATE TRIGGER update_dynamic_form_templates_updated_at
  BEFORE UPDATE ON dynamic_form_templates
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Trigger for dynamic_form_submissions
DROP TRIGGER IF EXISTS update_dynamic_form_submissions_updated_at ON dynamic_form_submissions;
CREATE TRIGGER update_dynamic_form_submissions_updated_at
  BEFORE UPDATE ON dynamic_form_submissions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Trigger for form_field_mappings
DROP TRIGGER IF EXISTS update_form_field_mappings_updated_at ON form_field_mappings;
CREATE TRIGGER update_form_field_mappings_updated_at
  BEFORE UPDATE ON form_field_mappings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================================
-- PART 8: Create helpful views for analytics
-- =====================================================================

-- View for form template usage analytics
CREATE OR REPLACE VIEW form_template_analytics AS
SELECT 
  dft.id,
  dft.form_title,
  dft.form_type,
  dft.total_fields,
  dft.extraction_confidence,
  dft.times_used,
  dft.created_at,
  COUNT(dfs.id) as total_submissions,
  COUNT(CASE WHEN dfs.submission_status = 'submitted' THEN 1 END) as submitted_count,
  COUNT(CASE WHEN dfs.response_outcome = 'approved' THEN 1 END) as approved_count,
  AVG(dfs.generation_confidence) as avg_generation_confidence
FROM dynamic_form_templates dft
LEFT JOIN dynamic_form_submissions dfs ON dft.id = dfs.form_template_id
GROUP BY dft.id, dft.form_title, dft.form_type, dft.total_fields, 
         dft.extraction_confidence, dft.times_used, dft.created_at;

-- View for field mapping effectiveness
CREATE OR REPLACE VIEW field_mapping_analytics AS  
SELECT 
  form_type,
  data_source,
  data_field,
  COUNT(*) as mapping_count,
  AVG(mapping_confidence) as avg_confidence,
  AVG(success_rate) as avg_success_rate,
  COUNT(CASE WHEN user_verified = true THEN 1 END) as verified_count
FROM form_field_mappings
GROUP BY form_type, data_source, data_field;

-- =====================================================================
-- PART 9: Insert sample data for testing (optional)
-- =====================================================================

-- Sample form template for testing
INSERT INTO dynamic_form_templates (
  id,
  user_id,
  form_title,
  form_type,
  form_structure,
  extraction_metadata,
  total_fields,
  extraction_confidence,
  extraction_status
) VALUES (
  gen_random_uuid(),
  (SELECT id FROM auth.users LIMIT 1), -- Use first user for testing
  'Sample Grant Application Form',
  'grant_application',
  '{"formFields": {"organization_name": {"label": "Organization Name", "type": "text", "required": true}}, "formSections": [{"id": "org_info", "title": "Organization Information", "fields": ["organization_name"]}], "formMetadata": {"title": "Sample Form", "totalFields": 1}}',
  '{"totalFieldsDetected": 1, "sectionsDetected": 1, "confidence": 0.95, "documentType": "grant_application"}',
  1,
  0.95,
  'completed'
) ON CONFLICT DO NOTHING; -- Prevent duplicate inserts

-- =====================================================================
-- COMPLETION MESSAGE
-- =====================================================================

DO $$
BEGIN
  RAISE NOTICE '================================================================';
  RAISE NOTICE 'FundingOS Dynamic Form Analysis Database Update Complete!';
  RAISE NOTICE '================================================================';
  RAISE NOTICE 'New tables created:';
  RAISE NOTICE '- dynamic_form_templates (stores extracted form structures)';
  RAISE NOTICE '- dynamic_form_submissions (tracks generated applications)';
  RAISE NOTICE '- form_field_mappings (learns field mapping patterns)';
  RAISE NOTICE '';
  RAISE NOTICE 'Enhanced existing tables:';
  RAISE NOTICE '- project_opportunities (added dynamic form columns)';
  RAISE NOTICE '- submissions (added dynamic form tracking)';
  RAISE NOTICE '';
  RAISE NOTICE 'Analytics views created:';
  RAISE NOTICE '- form_template_analytics';
  RAISE NOTICE '- field_mapping_analytics';
  RAISE NOTICE '';
  RAISE NOTICE 'All indexes, triggers, and RLS policies have been created.';
  RAISE NOTICE 'Your database now fully supports dynamic form analysis!';
  RAISE NOTICE '================================================================';
END $$;